generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Contact {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName  String
  lastName   String
  title      String
  company    String
  industry   String
  goalDays   Int
  email      String
  phone      String
  links      String[]
  interests  String[]
  activities Activity[]
  isArchived Boolean    @default(false)

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Activity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  date        DateTime

  type ActivityType

  Contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId String
}

enum ActivityType {
  USER
  SYSTEM
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName     String
  lastName      String
  email         String?        @unique
  phone         String?        @unique
  image         String?
  Contacts      Contact[]
  goals         Goals?
  subscriptions Subscription[]

  externalId String @unique
}

model Goals {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  networkingComfortLevel Int
  goalConnections        Int
  goalMessages           Int
  connections            Int @default(0)
  messages               Int @default(0)
  streak                 Int @default(0)
  highestStreak          Int @default(0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Quote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text   String
  author String?
  titles String[]
}

model Subscription {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  endpoint  String   @unique
  auth      String   @unique
  p256dh    String   @unique

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  notificationSettings NotificationSettings?
}

model NotificationSettings {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  newAction Boolean
  streak    Boolean
  meetGoal  Boolean

  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionId String       @unique
}
